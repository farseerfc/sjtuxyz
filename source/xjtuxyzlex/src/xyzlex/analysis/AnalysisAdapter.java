/* This file was generated by SableCC (http://www.sablecc.org/). */

package xyzlex.analysis;

import java.util.*;
import xyzlex.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseTIfKey(TIfKey node)
    {
        defaultCase(node);
    }

    public void caseTElseKey(TElseKey node)
    {
        defaultCase(node);
    }

    public void caseTWhileKey(TWhileKey node)
    {
        defaultCase(node);
    }

    public void caseTIntKey(TIntKey node)
    {
        defaultCase(node);
    }

    public void caseTRealKey(TRealKey node)
    {
        defaultCase(node);
    }

    public void caseTPreKey(TPreKey node)
    {
        defaultCase(node);
    }

    public void caseTPostKey(TPostKey node)
    {
        defaultCase(node);
    }

    public void caseTClassKey(TClassKey node)
    {
        defaultCase(node);
    }

    public void caseTExtendsKey(TExtendsKey node)
    {
        defaultCase(node);
    }

    public void caseTPublicKey(TPublicKey node)
    {
        defaultCase(node);
    }

    public void caseTStaticKey(TStaticKey node)
    {
        defaultCase(node);
    }

    public void caseTVoidKey(TVoidKey node)
    {
        defaultCase(node);
    }

    public void caseTMainKey(TMainKey node)
    {
        defaultCase(node);
    }

    public void caseTPoint(TPoint node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTRealLiteral(TRealLiteral node)
    {
        defaultCase(node);
    }

    public void caseTIntegerLiteral(TIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseTOperator(TOperator node)
    {
        defaultCase(node);
    }

    public void caseTLeftBrace(TLeftBrace node)
    {
        defaultCase(node);
    }

    public void caseTRightBrace(TRightBrace node)
    {
        defaultCase(node);
    }

    public void caseTLeftP(TLeftP node)
    {
        defaultCase(node);
    }

    public void caseTRightP(TRightP node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTBlanks(TBlanks node)
    {
        defaultCase(node);
    }

    public void caseTCommentNewStyle(TCommentNewStyle node)
    {
        defaultCase(node);
    }

    public void caseTCommentOldStyle(TCommentOldStyle node)
    {
        defaultCase(node);
    }

    public void caseTCommentOldStyleEnd(TCommentOldStyleEnd node)
    {
        defaultCase(node);
    }

    public void caseTCommentNewStyleEnd(TCommentNewStyleEnd node)
    {
        defaultCase(node);
    }

    public void caseTCommentAnyN(TCommentAnyN node)
    {
        defaultCase(node);
    }

    public void caseTCommentAnyO(TCommentAnyO node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTSlashO(TSlashO node)
    {
        defaultCase(node);
    }

    public void caseTSlashN(TSlashN node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
