/* This file was generated by SableCC (http://www.sablecc.org/). */

package xyzlex.node;

import xyzlex.analysis.*;

@SuppressWarnings("nls")
public final class AMinusOprExp extends PExp
{
    private TMinusOpr _minusOpr_;
    private PExp _first_;
    private PExp _rest_;

    public AMinusOprExp()
    {
        // Constructor
    }

    public AMinusOprExp(
        @SuppressWarnings("hiding") TMinusOpr _minusOpr_,
        @SuppressWarnings("hiding") PExp _first_,
        @SuppressWarnings("hiding") PExp _rest_)
    {
        // Constructor
        setMinusOpr(_minusOpr_);

        setFirst(_first_);

        setRest(_rest_);

    }

    @Override
    public Object clone()
    {
        return new AMinusOprExp(
            cloneNode(this._minusOpr_),
            cloneNode(this._first_),
            cloneNode(this._rest_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMinusOprExp(this);
    }

    public TMinusOpr getMinusOpr()
    {
        return this._minusOpr_;
    }

    public void setMinusOpr(TMinusOpr node)
    {
        if(this._minusOpr_ != null)
        {
            this._minusOpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._minusOpr_ = node;
    }

    public PExp getFirst()
    {
        return this._first_;
    }

    public void setFirst(PExp node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public PExp getRest()
    {
        return this._rest_;
    }

    public void setRest(PExp node)
    {
        if(this._rest_ != null)
        {
            this._rest_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rest_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._minusOpr_)
            + toString(this._first_)
            + toString(this._rest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._minusOpr_ == child)
        {
            this._minusOpr_ = null;
            return;
        }

        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._rest_ == child)
        {
            this._rest_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._minusOpr_ == oldChild)
        {
            setMinusOpr((TMinusOpr) newChild);
            return;
        }

        if(this._first_ == oldChild)
        {
            setFirst((PExp) newChild);
            return;
        }

        if(this._rest_ == oldChild)
        {
            setRest((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
