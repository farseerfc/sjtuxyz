/* This file was generated by SableCC (http://www.sablecc.org/). */

package xyzlex.node;

import xyzlex.analysis.*;

@SuppressWarnings("nls")
public final class AArrayLengthExp extends PExp
{
    private PExp _array_;
    private TLength _length_;

    public AArrayLengthExp()
    {
        // Constructor
    }

    public AArrayLengthExp(
        @SuppressWarnings("hiding") PExp _array_,
        @SuppressWarnings("hiding") TLength _length_)
    {
        // Constructor
        setArray(_array_);

        setLength(_length_);

    }

    @Override
    public Object clone()
    {
        return new AArrayLengthExp(
            cloneNode(this._array_),
            cloneNode(this._length_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayLengthExp(this);
    }

    public PExp getArray()
    {
        return this._array_;
    }

    public void setArray(PExp node)
    {
        if(this._array_ != null)
        {
            this._array_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._array_ = node;
    }

    public TLength getLength()
    {
        return this._length_;
    }

    public void setLength(TLength node)
    {
        if(this._length_ != null)
        {
            this._length_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._length_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._array_)
            + toString(this._length_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._array_ == child)
        {
            this._array_ = null;
            return;
        }

        if(this._length_ == child)
        {
            this._length_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._array_ == oldChild)
        {
            setArray((PExp) newChild);
            return;
        }

        if(this._length_ == oldChild)
        {
            setLength((TLength) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
