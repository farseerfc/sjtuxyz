Package xyzlex;

Helpers
	all= [ 0 .. 0xffff ] ;
	letter = ['a'..'z'] | ['A'..'Z'];
	digit = ['0' .. '9'];
	sp = ' ' ;
    cr = 13 ; // carriage return
    lf = 10 ; // line feed
    tab = 9 ; // tab char
    bl = sp | cr | lf | tab ;
    nl = cr | lf ;
    underscore = '_' ;
    plus_c = '+' ;
    minus_c = '-' ;
    signed_c = plus_c | minus_c ;
    e_c = 'E' | 'e' ;
    not_cr_lf = [all -[cr+lf]];
    not_star = [all - '*'];
    not_star_slash = [not_star-'/'];
    new_comment = '//' not_cr_lf* nl;
    old_comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
    
    
Tokens
	if_key = 'if';
	else_key = 'else';
	while_key = 'while';
	int_key = 'int';
	real_key = 'real';
	pre_key = 'pre';
	post_key = 'post';
	class_key = 'class';
	extends_key = 'extends';
	public_key = 'public';
	static_key = 'static';
	void_key = 'void';
	main_key = 'main';
 	new_key = 'new';
	this_key = 'this';
	boolean_key = 'boolean';
	return_key = 'return';
	id = letter (underscore | digit | letter)*;
	point = '.';
	real_literal = digit* '.' digit* (e_c signed_c? digit+)?;
	integer_literal = digit+;
	bi_opr = ('&&' | '||' | '>' | '<' | '+' | '-' | '*' | '/' | '=' ); 
	left_brace = '{' ;
	right_brace = '}' ;
	left_bracket = '[';
	right_bracket = ']';
	left_p = '(' ;
	right_p = ')' ;
	semicolon = ';' ;
	colon = ':' ;
	comma = ',';
	
	blanks = bl*;
	comment = old_comment | new_comment;

Ignored Tokens
	blanks,
	comment;
	