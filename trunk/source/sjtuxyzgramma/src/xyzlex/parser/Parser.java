/* This file was generated by SableCC (http://www.sablecc.org/). */

package xyzlex.parser;

import xyzlex.lexer.*;
import xyzlex.node.*;
import xyzlex.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAprogram1Program */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAprogram2Program */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AAprogram3Program */
		    {
			ArrayList list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce AAprogram4Program */
		    {
			ArrayList list = new3();
			push(goTo(0), list);
		    }
		    break;
                    case 4: /* reduce AVarDecl */
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AIntArrayType */
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce ARealArrayType */
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;
                    case 7: /* reduce ABooleanType */
		    {
			ArrayList list = new7();
			push(goTo(2), list);
		    }
		    break;
                    case 8: /* reduce AIntType */
		    {
			ArrayList list = new8();
			push(goTo(2), list);
		    }
		    break;
                    case 9: /* reduce ARealType */
		    {
			ArrayList list = new9();
			push(goTo(2), list);
		    }
		    break;
                    case 10: /* reduce AClassType */
		    {
			ArrayList list = new10();
			push(goTo(2), list);
		    }
		    break;
                    case 11: /* reduce AAblockstate1State */
		    {
			ArrayList list = new11();
			push(goTo(3), list);
		    }
		    break;
                    case 12: /* reduce AAblockstate2State */
		    {
			ArrayList list = new12();
			push(goTo(3), list);
		    }
		    break;
                    case 13: /* reduce AIfState */
		    {
			ArrayList list = new13();
			push(goTo(3), list);
		    }
		    break;
                    case 14: /* reduce AWhileState */
		    {
			ArrayList list = new14();
			push(goTo(3), list);
		    }
		    break;
                    case 15: /* reduce APrintState */
		    {
			ArrayList list = new15();
			push(goTo(3), list);
		    }
		    break;
                    case 16: /* reduce AAassignstate1State */
		    {
			ArrayList list = new16();
			push(goTo(3), list);
		    }
		    break;
                    case 17: /* reduce AAassignstate2State */
		    {
			ArrayList list = new17();
			push(goTo(3), list);
		    }
		    break;
                    case 18: /* reduce AArrayIndex */
		    {
			ArrayList list = new18();
			push(goTo(4), list);
		    }
		    break;
                    case 19: /* reduce AOrOprExp */
		    {
			ArrayList list = new19();
			push(goTo(5), list);
		    }
		    break;
                    case 20: /* reduce ASingleExp */
		    {
			ArrayList list = new20();
			push(goTo(5), list);
		    }
		    break;
                    case 21: /* reduce AAndOprExp1 */
		    {
			ArrayList list = new21();
			push(goTo(6), list);
		    }
		    break;
                    case 22: /* reduce ASingleExp1 */
		    {
			ArrayList list = new22();
			push(goTo(6), list);
		    }
		    break;
                    case 23: /* reduce ANotOprExp2 */
		    {
			ArrayList list = new23();
			push(goTo(7), list);
		    }
		    break;
                    case 24: /* reduce ASingleExp2 */
		    {
			ArrayList list = new24();
			push(goTo(7), list);
		    }
		    break;
                    case 25: /* reduce AGreaterOprExp3 */
		    {
			ArrayList list = new25();
			push(goTo(8), list);
		    }
		    break;
                    case 26: /* reduce ALessOprExp3 */
		    {
			ArrayList list = new26();
			push(goTo(8), list);
		    }
		    break;
                    case 27: /* reduce ASingleExp3 */
		    {
			ArrayList list = new27();
			push(goTo(8), list);
		    }
		    break;
                    case 28: /* reduce APlusOprExp4 */
		    {
			ArrayList list = new28();
			push(goTo(9), list);
		    }
		    break;
                    case 29: /* reduce AMinusOprExp4 */
		    {
			ArrayList list = new29();
			push(goTo(9), list);
		    }
		    break;
                    case 30: /* reduce ASingleExp4 */
		    {
			ArrayList list = new30();
			push(goTo(9), list);
		    }
		    break;
                    case 31: /* reduce AMultiplyOprExp5 */
		    {
			ArrayList list = new31();
			push(goTo(10), list);
		    }
		    break;
                    case 32: /* reduce ADivideOprExp5 */
		    {
			ArrayList list = new32();
			push(goTo(10), list);
		    }
		    break;
                    case 33: /* reduce ASingleExp5 */
		    {
			ArrayList list = new33();
			push(goTo(10), list);
		    }
		    break;
                    case 34: /* reduce AIntLtTerm */
		    {
			ArrayList list = new34();
			push(goTo(11), list);
		    }
		    break;
                    case 35: /* reduce ARealLtTerm */
		    {
			ArrayList list = new35();
			push(goTo(11), list);
		    }
		    break;
                    case 36: /* reduce ATrueLtTerm */
		    {
			ArrayList list = new36();
			push(goTo(11), list);
		    }
		    break;
                    case 37: /* reduce AFalseLtTerm */
		    {
			ArrayList list = new37();
			push(goTo(11), list);
		    }
		    break;
                    case 38: /* reduce AVarTerm */
		    {
			ArrayList list = new38();
			push(goTo(11), list);
		    }
		    break;
                    case 39: /* reduce AThisTerm */
		    {
			ArrayList list = new39();
			push(goTo(11), list);
		    }
		    break;
                    case 40: /* reduce ASubExpTerm */
		    {
			ArrayList list = new40();
			push(goTo(11), list);
		    }
		    break;
                    case 41: /* reduce AArraySubTerm */
		    {
			ArrayList list = new41();
			push(goTo(11), list);
		    }
		    break;
                    case 42: /* reduce AArrayLengthTerm */
		    {
			ArrayList list = new42();
			push(goTo(11), list);
		    }
		    break;
                    case 43: /* reduce AAmemfuncterm1Term */
		    {
			ArrayList list = new43();
			push(goTo(11), list);
		    }
		    break;
                    case 44: /* reduce AAmemfuncterm2Term */
		    {
			ArrayList list = new44();
			push(goTo(11), list);
		    }
		    break;
                    case 45: /* reduce ANewIntArTerm */
		    {
			ArrayList list = new45();
			push(goTo(11), list);
		    }
		    break;
                    case 46: /* reduce ANewRealArTerm */
		    {
			ArrayList list = new46();
			push(goTo(11), list);
		    }
		    break;
                    case 47: /* reduce ANewObjectTerm */
		    {
			ArrayList list = new47();
			push(goTo(11), list);
		    }
		    break;
                    case 48: /* reduce ACommaSepExpList */
		    {
			ArrayList list = new48();
			push(goTo(12), list);
		    }
		    break;
                    case 49: /* reduce ASingleExpList */
		    {
			ArrayList list = new49();
			push(goTo(12), list);
		    }
		    break;
                    case 50: /* reduce ATerminal$VarDecl */
		    {
			ArrayList list = new50();
			push(goTo(13), list);
		    }
		    break;
                    case 51: /* reduce ANonTerminal$VarDecl */
		    {
			ArrayList list = new51();
			push(goTo(13), list);
		    }
		    break;
                    case 52: /* reduce ATerminal$State */
		    {
			ArrayList list = new52();
			push(goTo(14), list);
		    }
		    break;
                    case 53: /* reduce ANonTerminal$State */
		    {
			ArrayList list = new53();
			push(goTo(14), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        }
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2, listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode3, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAprogram3Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        }
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(listNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAprogram4Program */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogramNode1 = new AProgram(listNode3, listNode5);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarDecl(ptypeNode2, tidNode3);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AIntArrayType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        TLSq tlsqNode3;
        TRSq trsqNode4;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tlsqNode3 = (TLSq)nodeArrayList2.get(0);
        trsqNode4 = (TRSq)nodeArrayList3.get(0);

        ptypeNode1 = new AIntArrayType(tintNode2, tlsqNode3, trsqNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce ARealArrayType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TReal trealNode2;
        TLSq tlsqNode3;
        TRSq trsqNode4;
        trealNode2 = (TReal)nodeArrayList1.get(0);
        tlsqNode3 = (TLSq)nodeArrayList2.get(0);
        trsqNode4 = (TRSq)nodeArrayList3.get(0);

        ptypeNode1 = new ARealArrayType(trealNode2, tlsqNode3, trsqNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ARealType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptypeNode1 = new ARealType(trealNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AClassType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AClassType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAblockstate1State */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PState pstateNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pstateNode1 = new ABlockState(listNode2);
        }
	nodeList.add(pstateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAblockstate2State */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PState pstateNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstateNode1 = new ABlockState(listNode3);
        }
	nodeList.add(pstateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AIfState */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PState pstateNode1;
        {
            // Block
        PExp pexpNode2;
        PState pstateNode3;
        PState pstateNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstateNode3 = (PState)nodeArrayList5.get(0);
        pstateNode4 = (PState)nodeArrayList7.get(0);

        pstateNode1 = new AIfState(pexpNode2, pstateNode3, pstateNode4);
        }
	nodeList.add(pstateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AWhileState */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PState pstateNode1;
        {
            // Block
        PExp pexpNode2;
        PState pstateNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstateNode3 = (PState)nodeArrayList5.get(0);

        pstateNode1 = new AWhileState(pexpNode2, pstateNode3);
        }
	nodeList.add(pstateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce APrintState */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PState pstateNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pstateNode1 = new APrintState(pexpNode2);
        }
	nodeList.add(pstateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAassignstate1State */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PState pstateNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pstateNode1 = new AAssignState(tidNode2, null, pexpNode4);
        }
	nodeList.add(pstateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAassignstate2State */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PState pstateNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList4.get(0);

        pstateNode1 = new AAssignState(tidNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pstateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AArrayIndex */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AOrOprExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TOrOpr toroprNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        toroprNode2 = (TOrOpr)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList1.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrOprExp(toroprNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ASingleExp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAndOprExp1 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TAndOpr tandoprNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tandoprNode2 = (TAndOpr)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList1.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndOprExp(tandoprNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ASingleExp1 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ANotOprExp2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNotOpr tnotoprNode2;
        PExp pexpNode3;
        tnotoprNode2 = (TNotOpr)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotOprExp(tnotoprNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ASingleExp2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AGreaterOprExp3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TGreaterOpr tgreateroprNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tgreateroprNode2 = (TGreaterOpr)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList1.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGreaterOprExp(tgreateroprNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ALessOprExp3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TLessOpr tlessoprNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tlessoprNode2 = (TLessOpr)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList1.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALessOprExp(tlessoprNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ASingleExp3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce APlusOprExp4 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPlusOpr tplusoprNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tplusoprNode2 = (TPlusOpr)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList1.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusOprExp(tplusoprNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AMinusOprExp4 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TMinusOpr tminusoprNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tminusoprNode2 = (TMinusOpr)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList1.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusOprExp(tminusoprNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ASingleExp4 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AMultiplyOprExp5 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TMultiplyOpr tmultiplyoprNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tmultiplyoprNode2 = (TMultiplyOpr)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList1.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultiplyOprExp(tmultiplyoprNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ADivideOprExp5 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TDivideOpr tdivideoprNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        tdivideoprNode2 = (TDivideOpr)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList1.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivideOprExp(tdivideoprNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ASingleExp5 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AIntLtTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIntLt tintltNode2;
        tintltNode2 = (TIntLt)nodeArrayList1.get(0);

        pexpNode1 = new AIntLtExp(tintltNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ARealLtTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TRealLt trealltNode2;
        trealltNode2 = (TRealLt)nodeArrayList1.get(0);

        pexpNode1 = new ARealLtExp(trealltNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ATrueLtTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpNode1 = new ATrueLtExp(ttrueNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AFalseLtTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpNode1 = new AFalseLtExp(tfalseNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AVarTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AVarExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AThisTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TThis tthisNode2;
        tthisNode2 = (TThis)nodeArrayList1.get(0);

        pexpNode1 = new AThisExp(tthisNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ASubExpTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AArraySubTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        TLSq tlsqNode4;
        TRSq trsqNode5;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);
        tlsqNode4 = (TLSq)nodeArrayList2.get(0);
        trsqNode5 = (TRSq)nodeArrayList4.get(0);

        pexpNode1 = new AArraySubExp(pexpNode2, pexpNode3, tlsqNode4, trsqNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AArrayLengthTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TLength tlengthNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tlengthNode3 = (TLength)nodeArrayList3.get(0);

        pexpNode1 = new AArrayLengthExp(pexpNode2, tlengthNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AAmemfuncterm1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        TPoint tpointNode5;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        tpointNode5 = (TPoint)nodeArrayList2.get(0);

        pexpNode1 = new AMemFuncExp(pexpNode2, tidNode3, listNode4, tpointNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AAmemfuncterm2Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        TPoint tpointNode6;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tpointNode6 = (TPoint)nodeArrayList2.get(0);

        pexpNode1 = new AMemFuncExp(pexpNode2, tidNode3, listNode5, tpointNode6);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ANewIntArTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TNew tnewNode3;
        pexpNode2 = (PExp)nodeArrayList4.get(0);
        tnewNode3 = (TNew)nodeArrayList1.get(0);

        pexpNode1 = new ANewIntArExp(pexpNode2, tnewNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ANewRealArTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TNew tnewNode3;
        pexpNode2 = (PExp)nodeArrayList4.get(0);
        tnewNode3 = (TNew)nodeArrayList1.get(0);

        pexpNode1 = new ANewRealArExp(pexpNode2, tnewNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ANewObjectTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        TNew tnewNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tnewNode3 = (TNew)nodeArrayList1.get(0);

        pexpNode1 = new ANewObjectExp(tidNode2, tnewNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ACommaSepExpList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        LinkedList listNode2 = new LinkedList();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ASingleExpList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ATerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce ANonTerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ATerminal$State */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PState pstateNode1;
        pstateNode1 = (PState)nodeArrayList1.get(0);
	if(pstateNode1 != null)
	{
	  listNode2.add(pstateNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce ANonTerminal$State */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PState pstateNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstateNode2 = (PState)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstateNode2 != null)
	{
	  listNode3.add(pstateNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {15, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {35, SHIFT, 8}, },
			{{-1, ERROR, 1}, {39, SHIFT, 15}, },
			{{-1, ERROR, 2}, {39, SHIFT, 16}, },
			{{-1, REDUCE, 8}, {37, SHIFT, 17}, },
			{{-1, REDUCE, 9}, {37, SHIFT, 18}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 6}, {39, SHIFT, 19}, },
			{{-1, REDUCE, 10}, {34, SHIFT, 20}, {37, SHIFT, 21}, },
			{{-1, ERROR, 8}, {0, SHIFT, 1}, {2, SHIFT, 2}, {20, SHIFT, 6}, {21, SHIFT, 23}, {35, SHIFT, 8}, {36, SHIFT, 24}, },
			{{-1, ERROR, 9}, {44, ACCEPT, -1}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 11}, {21, SHIFT, 26}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, {15, SHIFT, 5}, {20, SHIFT, 6}, {21, SHIFT, 7}, {35, SHIFT, 8}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, {2, SHIFT, 2}, {20, SHIFT, 6}, {21, SHIFT, 23}, {35, SHIFT, 8}, },
			{{-1, ERROR, 15}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 16}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 17}, {38, SHIFT, 47}, },
			{{-1, ERROR, 18}, {38, SHIFT, 48}, },
			{{-1, ERROR, 19}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 20}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 21}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 22}, {34, SHIFT, 52}, },
			{{-1, ERROR, 23}, {34, SHIFT, 20}, {37, SHIFT, 21}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 25}, {0, SHIFT, 1}, {2, SHIFT, 2}, {20, SHIFT, 6}, {21, SHIFT, 23}, {35, SHIFT, 8}, {36, SHIFT, 53}, },
			{{-1, ERROR, 26}, {41, SHIFT, 54}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 1}, {2, SHIFT, 2}, {20, SHIFT, 6}, {21, SHIFT, 23}, {35, SHIFT, 8}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 30}, {3, SHIFT, 55}, {4, SHIFT, 56}, {21, SHIFT, 57}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 37}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 38}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 39}, {32, SHIFT, 60}, {40, SHIFT, 61}, },
			{{-1, REDUCE, 20}, {31, SHIFT, 62}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 24}, {29, SHIFT, 63}, {30, SHIFT, 64}, },
			{{-1, REDUCE, 27}, {27, SHIFT, 65}, {28, SHIFT, 66}, },
			{{-1, REDUCE, 30}, {25, SHIFT, 67}, {26, SHIFT, 68}, },
			{{-1, REDUCE, 33}, {22, SHIFT, 69}, {37, SHIFT, 70}, },
			{{-1, ERROR, 46}, {32, SHIFT, 60}, {40, SHIFT, 71}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 49}, {32, SHIFT, 60}, {40, SHIFT, 72}, },
			{{-1, ERROR, 50}, {32, SHIFT, 60}, {41, SHIFT, 73}, },
			{{-1, ERROR, 51}, {32, SHIFT, 60}, {38, SHIFT, 74}, },
			{{-1, ERROR, 52}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 55}, {37, SHIFT, 76}, },
			{{-1, ERROR, 56}, {37, SHIFT, 77}, },
			{{-1, ERROR, 57}, {39, SHIFT, 78}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 59}, {32, SHIFT, 60}, {40, SHIFT, 79}, },
			{{-1, ERROR, 60}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 61}, {0, SHIFT, 1}, {2, SHIFT, 2}, {20, SHIFT, 6}, {21, SHIFT, 23}, {35, SHIFT, 8}, },
			{{-1, ERROR, 62}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 63}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {39, SHIFT, 38}, },
			{{-1, ERROR, 64}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {39, SHIFT, 38}, },
			{{-1, ERROR, 65}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {39, SHIFT, 38}, },
			{{-1, ERROR, 66}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {39, SHIFT, 38}, },
			{{-1, ERROR, 67}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {39, SHIFT, 38}, },
			{{-1, ERROR, 68}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {39, SHIFT, 38}, },
			{{-1, ERROR, 69}, {17, SHIFT, 89}, {21, SHIFT, 90}, },
			{{-1, ERROR, 70}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 71}, {0, SHIFT, 1}, {2, SHIFT, 2}, {20, SHIFT, 6}, {21, SHIFT, 23}, {35, SHIFT, 8}, },
			{{-1, ERROR, 72}, {41, SHIFT, 93}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 75}, {32, SHIFT, 60}, {41, SHIFT, 94}, },
			{{-1, ERROR, 76}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 77}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, ERROR, 78}, {40, SHIFT, 97}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 19}, {31, SHIFT, 62}, },
			{{-1, ERROR, 81}, {1, SHIFT, 98}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 25}, {27, SHIFT, 65}, {28, SHIFT, 66}, },
			{{-1, REDUCE, 26}, {27, SHIFT, 65}, {28, SHIFT, 66}, },
			{{-1, REDUCE, 28}, {25, SHIFT, 67}, {26, SHIFT, 68}, },
			{{-1, REDUCE, 29}, {25, SHIFT, 67}, {26, SHIFT, 68}, },
			{{-1, REDUCE, 31}, {22, SHIFT, 69}, {37, SHIFT, 70}, },
			{{-1, REDUCE, 32}, {22, SHIFT, 69}, {37, SHIFT, 70}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 90}, {39, SHIFT, 99}, },
			{{-1, ERROR, 91}, {32, SHIFT, 60}, {38, SHIFT, 100}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 95}, {32, SHIFT, 60}, {38, SHIFT, 101}, },
			{{-1, ERROR, 96}, {32, SHIFT, 60}, {38, SHIFT, 102}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 98}, {0, SHIFT, 1}, {2, SHIFT, 2}, {20, SHIFT, 6}, {21, SHIFT, 23}, {35, SHIFT, 8}, },
			{{-1, ERROR, 99}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, {40, SHIFT, 104}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 49}, {32, SHIFT, 60}, {43, SHIFT, 107}, },
			{{-1, ERROR, 106}, {40, SHIFT, 108}, },
			{{-1, ERROR, 107}, {13, SHIFT, 30}, {14, SHIFT, 31}, {18, SHIFT, 32}, {19, SHIFT, 33}, {21, SHIFT, 34}, {23, SHIFT, 35}, {24, SHIFT, 36}, {33, SHIFT, 37}, {39, SHIFT, 38}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 48}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 9}, },
			{{-1, 10}, {13, 27}, },
			{{-1, 11}, },
			{{-1, 12}, {14, 29}, {25, 29}, {28, 29}, {61, 81}, {71, 92}, {98, 103}, },
			{{-1, 22}, },
			{{-1, 105}, {15, 39}, {16, 46}, {19, 49}, {20, 50}, {21, 51}, {38, 59}, {52, 75}, {70, 91}, {76, 95}, {77, 96}, },
			{{-1, 40}, {60, 80}, },
			{{-1, 41}, {37, 58}, {62, 82}, },
			{{-1, 42}, },
			{{-1, 43}, {63, 83}, {64, 84}, },
			{{-1, 44}, {65, 85}, {66, 86}, },
			{{-1, 45}, {67, 87}, {68, 88}, },
			{{-1, 106}, {107, 109}, },
			{{-1, 13}, },
			{{-1, 14}, {8, 25}, {13, 28}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'if', 'while', 'int', 'real', 'boolean', print, id, '{', EOF",
			"expecting: '('",
			"expecting: id, '['",
			"expecting: id",
			"expecting: id, '=', '['",
			"expecting: 'if', 'while', print, id, '{', '}'",
			"expecting: EOF",
			"expecting: 'if', 'while', print, id, '{', '}', EOF",
			"expecting: 'if', 'while', print, id, '{', EOF",
			"expecting: 'new', 'this', 'true', 'false', id, real lt, int lt, '!', '('",
			"expecting: ']'",
			"expecting: '='",
			"expecting: '=', '['",
			"expecting: 'if', 'else', 'while', print, id, '{', '}', EOF",
			"expecting: ';'",
			"expecting: 'int', 'real', id",
			"expecting: '.', '*', '/', '+', '-', '>', '<', '&&', '||', '[', ']', ')', ';', ','",
			"expecting: '||', ')'",
			"expecting: '&&', '||', ']', ')', ';', ','",
			"expecting: '>', '<', '&&', '||', ']', ')', ';', ','",
			"expecting: '+', '-', '>', '<', '&&', '||', ']', ')', ';', ','",
			"expecting: '*', '/', '+', '-', '>', '<', '&&', '||', ']', ')', ';', ','",
			"expecting: '||', ';'",
			"expecting: '||', ']'",
			"expecting: '['",
			"expecting: 'if', 'while', print, id, '{'",
			"expecting: 'new', 'this', 'true', 'false', id, real lt, int lt, '('",
			"expecting: 'length', id",
			"expecting: ')'",
			"expecting: 'else'",
			"expecting: 'new', 'this', 'true', 'false', id, real lt, int lt, '!', '(', ')'",
			"expecting: '||', ')', ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 2, 3, 1, 4, 5, 6, 0, 3, 7, 0, 8, 9, 9, 10, 10, 9, 9, 9, 11, 12, 13, 5, 14, 0, 8, 7, 15, 16, 16, 16, 16, 16, 16, 9, 9, 17, 18, 18, 19, 20, 21, 16, 17, 3, 3, 17, 22, 23, 9, 13, 0, 24, 24, 1, 18, 17, 9, 25, 9, 26, 26, 26, 26, 26, 26, 27, 9, 25, 14, 13, 11, 22, 9, 9, 28, 16, 18, 29, 18, 20, 20, 21, 21, 16, 16, 16, 1, 23, 13, 13, 13, 23, 23, 16, 25, 30, 16, 16, 16, 13, 16, 31, 28, 9, 16, 28, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
