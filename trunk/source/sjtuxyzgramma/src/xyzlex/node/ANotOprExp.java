/* This file was generated by SableCC (http://www.sablecc.org/). */

package xyzlex.node;

import xyzlex.analysis.*;

@SuppressWarnings("nls")
public final class ANotOprExp extends PExp
{
    private TNotOpr _notOpr_;
    private PExp _first_;

    public ANotOprExp()
    {
        // Constructor
    }

    public ANotOprExp(
        @SuppressWarnings("hiding") TNotOpr _notOpr_,
        @SuppressWarnings("hiding") PExp _first_)
    {
        // Constructor
        setNotOpr(_notOpr_);

        setFirst(_first_);

    }

    @Override
    public Object clone()
    {
        return new ANotOprExp(
            cloneNode(this._notOpr_),
            cloneNode(this._first_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotOprExp(this);
    }

    public TNotOpr getNotOpr()
    {
        return this._notOpr_;
    }

    public void setNotOpr(TNotOpr node)
    {
        if(this._notOpr_ != null)
        {
            this._notOpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._notOpr_ = node;
    }

    public PExp getFirst()
    {
        return this._first_;
    }

    public void setFirst(PExp node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._notOpr_)
            + toString(this._first_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._notOpr_ == child)
        {
            this._notOpr_ = null;
            return;
        }

        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._notOpr_ == oldChild)
        {
            setNotOpr((TNotOpr) newChild);
            return;
        }

        if(this._first_ == oldChild)
        {
            setFirst((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
