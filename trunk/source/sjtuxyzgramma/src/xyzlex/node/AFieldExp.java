/* This file was generated by SableCC (http://www.sablecc.org/). */

package xyzlex.node;

import xyzlex.analysis.*;

@SuppressWarnings("nls")
public final class AFieldExp extends PExp
{
    private PExp _object_;
    private TId _field_;

    public AFieldExp()
    {
        // Constructor
    }

    public AFieldExp(
        @SuppressWarnings("hiding") PExp _object_,
        @SuppressWarnings("hiding") TId _field_)
    {
        // Constructor
        setObject(_object_);

        setField(_field_);

    }

    @Override
    public Object clone()
    {
        return new AFieldExp(
            cloneNode(this._object_),
            cloneNode(this._field_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFieldExp(this);
    }

    public PExp getObject()
    {
        return this._object_;
    }

    public void setObject(PExp node)
    {
        if(this._object_ != null)
        {
            this._object_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._object_ = node;
    }

    public TId getField()
    {
        return this._field_;
    }

    public void setField(TId node)
    {
        if(this._field_ != null)
        {
            this._field_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._field_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._object_)
            + toString(this._field_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._object_ == child)
        {
            this._object_ = null;
            return;
        }

        if(this._field_ == child)
        {
            this._field_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._object_ == oldChild)
        {
            setObject((PExp) newChild);
            return;
        }

        if(this._field_ == oldChild)
        {
            setField((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
