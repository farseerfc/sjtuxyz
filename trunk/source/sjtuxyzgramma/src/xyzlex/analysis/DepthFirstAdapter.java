/* This file was generated by SableCC (http://www.sablecc.org/). */

package xyzlex.analysis;

import java.util.*;
import xyzlex.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarDecl());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PState> copy = new ArrayList<PState>(node.getState());
            for(PState e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarDecl(node);
    }

    public void inAIntArrayType(AIntArrayType node)
    {
        defaultIn(node);
    }

    public void outAIntArrayType(AIntArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntArrayType(AIntArrayType node)
    {
        inAIntArrayType(node);
        outAIntArrayType(node);
    }

    public void inARealArrayType(ARealArrayType node)
    {
        defaultIn(node);
    }

    public void outARealArrayType(ARealArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealArrayType(ARealArrayType node)
    {
        inARealArrayType(node);
        outARealArrayType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        outABooleanType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        outAIntType(node);
    }

    public void inARealType(ARealType node)
    {
        defaultIn(node);
    }

    public void outARealType(ARealType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealType(ARealType node)
    {
        inARealType(node);
        outARealType(node);
    }

    public void inAClassType(AClassType node)
    {
        defaultIn(node);
    }

    public void outAClassType(AClassType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassType(AClassType node)
    {
        inAClassType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAClassType(node);
    }

    public void inABlockState(ABlockState node)
    {
        defaultIn(node);
    }

    public void outABlockState(ABlockState node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockState(ABlockState node)
    {
        inABlockState(node);
        {
            List<PState> copy = new ArrayList<PState>(node.getList());
            for(PState e : copy)
            {
                e.apply(this);
            }
        }
        outABlockState(node);
    }

    public void inAIfState(AIfState node)
    {
        defaultIn(node);
    }

    public void outAIfState(AIfState node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfState(AIfState node)
    {
        inAIfState(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAIfState(node);
    }

    public void inAWhileState(AWhileState node)
    {
        defaultIn(node);
    }

    public void outAWhileState(AWhileState node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileState(AWhileState node)
    {
        inAWhileState(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getClause() != null)
        {
            node.getClause().apply(this);
        }
        outAWhileState(node);
    }

    public void inAPrintState(APrintState node)
    {
        defaultIn(node);
    }

    public void outAPrintState(APrintState node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintState(APrintState node)
    {
        inAPrintState(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPrintState(node);
    }

    public void inAAssignState(AAssignState node)
    {
        defaultIn(node);
    }

    public void outAAssignState(AAssignState node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignState(AAssignState node)
    {
        inAAssignState(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAAssignState(node);
    }

    public void inAOrOprExp(AOrOprExp node)
    {
        defaultIn(node);
    }

    public void outAOrOprExp(AOrOprExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrOprExp(AOrOprExp node)
    {
        inAOrOprExp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getRest() != null)
        {
            node.getRest().apply(this);
        }
        outAOrOprExp(node);
    }

    public void inAAndOprExp(AAndOprExp node)
    {
        defaultIn(node);
    }

    public void outAAndOprExp(AAndOprExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndOprExp(AAndOprExp node)
    {
        inAAndOprExp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getRest() != null)
        {
            node.getRest().apply(this);
        }
        outAAndOprExp(node);
    }

    public void inANotOprExp(ANotOprExp node)
    {
        defaultIn(node);
    }

    public void outANotOprExp(ANotOprExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotOprExp(ANotOprExp node)
    {
        inANotOprExp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outANotOprExp(node);
    }

    public void inAGreaterOprExp(AGreaterOprExp node)
    {
        defaultIn(node);
    }

    public void outAGreaterOprExp(AGreaterOprExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterOprExp(AGreaterOprExp node)
    {
        inAGreaterOprExp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getRest() != null)
        {
            node.getRest().apply(this);
        }
        outAGreaterOprExp(node);
    }

    public void inALessOprExp(ALessOprExp node)
    {
        defaultIn(node);
    }

    public void outALessOprExp(ALessOprExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessOprExp(ALessOprExp node)
    {
        inALessOprExp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getRest() != null)
        {
            node.getRest().apply(this);
        }
        outALessOprExp(node);
    }

    public void inAPlusOprExp(APlusOprExp node)
    {
        defaultIn(node);
    }

    public void outAPlusOprExp(APlusOprExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOprExp(APlusOprExp node)
    {
        inAPlusOprExp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getRest() != null)
        {
            node.getRest().apply(this);
        }
        outAPlusOprExp(node);
    }

    public void inAMinusOprExp(AMinusOprExp node)
    {
        defaultIn(node);
    }

    public void outAMinusOprExp(AMinusOprExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOprExp(AMinusOprExp node)
    {
        inAMinusOprExp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getRest() != null)
        {
            node.getRest().apply(this);
        }
        outAMinusOprExp(node);
    }

    public void inAMultiplyOprExp(AMultiplyOprExp node)
    {
        defaultIn(node);
    }

    public void outAMultiplyOprExp(AMultiplyOprExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyOprExp(AMultiplyOprExp node)
    {
        inAMultiplyOprExp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getRest() != null)
        {
            node.getRest().apply(this);
        }
        outAMultiplyOprExp(node);
    }

    public void inADivideOprExp(ADivideOprExp node)
    {
        defaultIn(node);
    }

    public void outADivideOprExp(ADivideOprExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideOprExp(ADivideOprExp node)
    {
        inADivideOprExp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getRest() != null)
        {
            node.getRest().apply(this);
        }
        outADivideOprExp(node);
    }

    public void inAIntLtExp(AIntLtExp node)
    {
        defaultIn(node);
    }

    public void outAIntLtExp(AIntLtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntLtExp(AIntLtExp node)
    {
        inAIntLtExp(node);
        if(node.getIntLt() != null)
        {
            node.getIntLt().apply(this);
        }
        outAIntLtExp(node);
    }

    public void inARealLtExp(ARealLtExp node)
    {
        defaultIn(node);
    }

    public void outARealLtExp(ARealLtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealLtExp(ARealLtExp node)
    {
        inARealLtExp(node);
        if(node.getRealLt() != null)
        {
            node.getRealLt().apply(this);
        }
        outARealLtExp(node);
    }

    public void inATrueLtExp(ATrueLtExp node)
    {
        defaultIn(node);
    }

    public void outATrueLtExp(ATrueLtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueLtExp(ATrueLtExp node)
    {
        inATrueLtExp(node);
        outATrueLtExp(node);
    }

    public void inAFalseLtExp(AFalseLtExp node)
    {
        defaultIn(node);
    }

    public void outAFalseLtExp(AFalseLtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseLtExp(AFalseLtExp node)
    {
        inAFalseLtExp(node);
        outAFalseLtExp(node);
    }

    public void inAVarExp(AVarExp node)
    {
        defaultIn(node);
    }

    public void outAVarExp(AVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        inAVarExp(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExp(node);
    }

    public void inAThisExp(AThisExp node)
    {
        defaultIn(node);
    }

    public void outAThisExp(AThisExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisExp(AThisExp node)
    {
        inAThisExp(node);
        outAThisExp(node);
    }

    public void inASubExpExp(ASubExpExp node)
    {
        defaultIn(node);
    }

    public void outASubExpExp(ASubExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpExp(ASubExpExp node)
    {
        inASubExpExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASubExpExp(node);
    }

    public void inAArraySubExp(AArraySubExp node)
    {
        defaultIn(node);
    }

    public void outAArraySubExp(AArraySubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArraySubExp(AArraySubExp node)
    {
        inAArraySubExp(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        outAArraySubExp(node);
    }

    public void inAArrayLengthExp(AArrayLengthExp node)
    {
        defaultIn(node);
    }

    public void outAArrayLengthExp(AArrayLengthExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayLengthExp(AArrayLengthExp node)
    {
        inAArrayLengthExp(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outAArrayLengthExp(node);
    }

    public void inAMemFuncExp(AMemFuncExp node)
    {
        defaultIn(node);
    }

    public void outAMemFuncExp(AMemFuncExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemFuncExp(AMemFuncExp node)
    {
        inAMemFuncExp(node);
        if(node.getObject() != null)
        {
            node.getObject().apply(this);
        }
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        {
            List<PExp> copy = new ArrayList<PExp>(node.getArgs());
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outAMemFuncExp(node);
    }

    public void inANewIntArExp(ANewIntArExp node)
    {
        defaultIn(node);
    }

    public void outANewIntArExp(ANewIntArExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewIntArExp(ANewIntArExp node)
    {
        inANewIntArExp(node);
        if(node.getSize() != null)
        {
            node.getSize().apply(this);
        }
        outANewIntArExp(node);
    }

    public void inANewRealArExp(ANewRealArExp node)
    {
        defaultIn(node);
    }

    public void outANewRealArExp(ANewRealArExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewRealArExp(ANewRealArExp node)
    {
        inANewRealArExp(node);
        if(node.getSize() != null)
        {
            node.getSize().apply(this);
        }
        outANewRealArExp(node);
    }

    public void inANewObjectExp(ANewObjectExp node)
    {
        defaultIn(node);
    }

    public void outANewObjectExp(ANewObjectExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewObjectExp(ANewObjectExp node)
    {
        inANewObjectExp(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outANewObjectExp(node);
    }
}
